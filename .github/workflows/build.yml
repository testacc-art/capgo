name: Build source code and send to Capgo

on:
  push:
    tags:
      - '*'
  workflow_dispatch:
      
jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16]
    name: "Build code and release"
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2
        with:
          version: 7
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
      - name: Install dependencies
        id: install_code
        run: pnpm install --frozen-lockfile
      - name: Lint
        id: lint_code
        run: pnpm lint
      - name: Build
        id: build_code
        run: pnpm mobile
        env:
          VITE_APP_URL: ${{ secrets.VITE_APP_URL }}
          VITE_VAPID_KEY: ${{ secrets.VITE_VAPID_KEY }}
          VITE_FIREBASE_CONFIG: ${{ secrets.VITE_FIREBASE_CONFIG }}
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      - name: Cache Homebrew Bundler RubyGems
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.set-up-homebrew.outputs.gems-path }}
          key: ${{ runner.os }}-rubygems-${{ steps.set-up-homebrew.outputs.gems-hash }}
          restore-keys: ${{ runner.os }}-rubygems-
      - name: Install Supabase CLI Homebrew dependencies
        run: |
          HOMEBREW_NO_INSTALL_CLEANUP=1 brew install supabase/tap/supabase
#       - name: Update functions Alpha
#         if: "contains(github.ref, '-alpha.')"
#         id: update_functions_preprod
#         env:
#           SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_TOKEN }}
#           BRANCH: development
#         run: node scripts/deploy_functions.mjs  
#       - name: Update functions
#         if: "!contains(github.ref, '-alpha.')"
#         id: update_functions_prod
#         env:
#           SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_TOKEN }}
#         run: node scripts/deploy_functions.mjs 
#       - name: Create Release Alpha
#         if: "contains(github.ref, '-alpha.')"
#         id: create_release_prepro
#         run: npx @capgo/cli@latest upload -a ${{ secrets.CAPGO_TOKEN }} -c alpha
#       - name: Create Release Production
#         if: "!contains(github.ref, '-alpha.')"
#         id: create_release_prod
#         run: npx @capgo/cli@latest upload -a ${{ secrets.CAPGO_TOKEN }} -c production
#   build_android:
#     runs-on: ubuntu-latest
#     strategy:
#       matrix:
#         node-version: [16]
#     steps:
#       - uses: actions/checkout@v3
#       - uses: pnpm/action-setup@v2
#         with:
#           version: 7
#       - name: Use Node.js ${{ matrix.node-version }}
#         uses: actions/setup-node@v3
#         with:
#           node-version: ${{ matrix.node-version }}
#           cache: 'pnpm'
#       - name: Setup java
#         uses: actions/setup-java@v3
#         with:
#             distribution: 'zulu'
#             java-version: '11'
#       - name: Install dependencies
#         id: install_code
#         run: pnpm install --frozen-lockfile
#       - name: Build
#         id: build_code
#         run: pnpm mobile
#       - name: Sync
#         id: sync_code
#         run: npx cap sync
#       - name: Build bundle
#         run: cd android/ && ./gradlew assembleRelease
#       - name: Extract Android signing key from env
#         run: |
#           echo "${{ secrets.ANDROID_RELEASE_KEYSTORE }}" > android/release.jks.base64
#           base64 -d android/release.jks.base64 > android/release.decrypted.jks
#       - name: Sign dev build
#         run: jarsigner -keystore android/release.decrypted.jks -storepass "${{ secrets.ANDROID_RELEASE_KEYSTORE_PASSWORD }}" -signedjar ./android/app/build/outputs/bundle/release/app-release-signed.aab ./android/app/build/outputs/bundle/release/app-release.aab captime-forgr
#       - name: Upload release bundle
#         uses: actions/upload-artifact@v2
#         with:
#           name: app-release
#           path: android/app/build/outputs/bundle/release/app-release-signed.aab
#           retention-days: 60
#   build_ios:
#       runs-on: macOS-latest
#       strategy:
#         matrix:
#           node-version: [16]
#       steps:
#         - uses: actions/checkout@v3
#         - uses: pnpm/action-setup@v2
#           with:
#             version: 7
#         - name: Use Node.js ${{ matrix.node-version }}
#           uses: actions/setup-node@v3
#           with:
#             node-version: ${{ matrix.node-version }}
#             cache: 'pnpm'
#         - name: Setup java
#           uses: actions/setup-java@v3
#           with:
#               distribution: 'zulu'
#               java-version: '11'
#         - name: Install dependencies
#           id: install_code
#           run: pnpm install --frozen-lockfile
#         - name: Build
#           id: build_code
#           run: pnpm mobile
#         - name: Sync
#           id: sync_code
#           run: npx cap sync
#         - name: Install native packages
#           run: cd ios/App && pod install

#         - name: 'Download Provisioning Profiles'
#           id: provisioning
#           uses: apple-actions/download-provisioning-profiles@v1
#           with:
#             bundle-id: 'ee.forgr.capgo'
#             profile-type: 'IOS_APP_STORE'
#             issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
#             api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
#             api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}
      
#         - name: 'Another example step'
#           run: echo ${{ steps.provisioning.outputs.profiles }}

#         - name: Archive
#           run: xcodebuild -workspace ios/App/App.xcworkspace
#             -scheme App clean archive -configuration release
#             -sdk iphoneos -allowProvisioningUpdates DEVELOPMENT_TEAM=${{secrets.APPLE_TEAM_ID}} -archivePath ios/App/App.xcarchive
#         - name: 'Upload app to TestFlight'
#           uses: apple-actions/upload-testflight-build@v1
#           with: 
#             app-path: 'path/to/application.ipa' 
#             issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
#             api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
#             api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
